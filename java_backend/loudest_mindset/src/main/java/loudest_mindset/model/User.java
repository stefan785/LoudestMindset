package loudest_mindset.model;

import com.fasterxml.jackson.annotation.*;
import java.util.Objects;
import jakarta.persistence.*;

/**
 * User
 */
@Entity
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonProperty("id")
    private Long id = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("photoId")
    private Long photoId = null;

    @JsonProperty("email")
    private String email = null;

    //Important: password from DB will NOT be sent to client
    @JsonProperty("password")
    private String password = null;

    @JsonProperty("status")
    private Integer status = 0;

    public User id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * auto generated by ORM or DBMS
     *
     * @return id
     *
     */
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public User name(String name) {
        this.name = name;
        return this;
    }

    /**
     * must be unique
     *
     * @return name
     *
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public User photoId(Long photoId) {
        this.photoId = photoId;
        return this;
    }

    /**
     * photoId of the profile picture
     *
     * @return photoId
     *
     */
    public Long getPhotoId() {
        return photoId;
    }

    public void setPhotoId(Long photoId) {
        this.photoId = photoId;
    }

    public User email(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get email
     *
     * @return email
     *
     */
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public User password(String password) {
        this.password = password;
        return this;
    }

    /**
     * //Important: password from DB will NOT be sent to client
     *
     * @return password
     *
     */
     
    public String getPassword() {
        
        return this.password;
    }
    
    
    
    /**
     * Checks if a string matches the password
     * @param uncheckedPassword
     * @return true if passwords match
     */
    public boolean checkPassword(String uncheckedPassword){
        
        //check if user is "deleted":
        
        if(this.status == 99){
            
            System.out.println("User deleted - no authorization");
            
            return false;
        }
        
        return uncheckedPassword.equals(this.password);
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public User status(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * code for the user status, eg. 1 for banned, 5 for admin
     *
     * @return status
     *
     */
    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User user = (User) o;
        return Objects.equals(this.id, user.id)
                && Objects.equals(this.name, user.name)
                && Objects.equals(this.photoId, user.photoId)
                && Objects.equals(this.email, user.email)
                && Objects.equals(this.password, user.password)
                && Objects.equals(this.status, user.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, photoId, email, password, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class User {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    photoId: ").append(toIndentedString(photoId)).append("\n");
        sb.append("    email: ").append(toIndentedString(email)).append("\n");
        sb.append("    password: ").append(toIndentedString(password)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
